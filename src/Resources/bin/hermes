#!/usr/bin/env php

<?php

use Hermes\Parser\ComposerWriter;
use Hermes\Parser\NpmWriter;
use Hermes\Utilities\ArgsChecker;
use Hermes\Utilities\PackageType;

function includeIfExists(string $file): bool
{
    return file_exists($file) && include $file;
}

if (
    !includeIfExists(__DIR__ . '/../../../../autoload.php') &&
    !includeIfExists(__DIR__ . '/../../vendor/autoload.php') &&
    !includeIfExists(__DIR__ . '/../../../../../../vendor/autoload.php')
) {
    fwrite(STDERR, 'Install dependencies using Composer.' . PHP_EOL);
    exit(1);
}

$opts = ['composer', 'package', 'all', 'path::', 'output::'];

$arguments = getopt('cpa', $opts);

$path = $arguments['path'] ?? null;
$output = $arguments['output'] ?? 'DEPENDENCIES';

$composerWriter = new ComposerWriter($path ?? '.', $output);
$npmWriter = new NpmWriter($path ?? dirname(__DIR__, 6), $output);

$writers = [
    PackageType::NPM => $npmWriter,
    PackageType::COMPOSER => $composerWriter,
];

$packages = PackageType::values();

foreach ($packages as $package) {
    $type = "is" . ucfirst($package);
    $writer = $writers[$package];

    if (ArgsChecker::$type($arguments)) {
        $writer->init();
        $writer->parse();
    }
}

if (ArgsChecker::isAll($arguments)) {
    foreach ($packages as $package) {
        $upperPackage = strtoupper($package);
        $writer = $writers[$package];

        $writer->setOutput($upperPackage);
        $writer->init();
        $writer->parse();
    }
}
